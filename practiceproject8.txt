Class and object:

public class CFC { 

      

    static String Employee_name; 

    static float Employee_salary; 

  

    static void set(String n, float p) { 

        Employee_name  = n; 

        Employee_salary  = p; 

    } 

  

    static void get() { 

        System.out.println("Employee name is: " +Employee_name ); 

        System.out.println("Employee CTC is: " + Employee_salary); 

    } 

  

    public static void main(String args[]) { 

        CFC.set("Rathod Avinash", 10000.0f); 

        CFC.get(); 

    } 
}


Abstraction:

abstract class Shape{  
abstract void draw();  
}  

class Rectangle extends Shape{  
void draw(){System.out.println("drawing rectangle");}  
}  
class Circle1 extends Shape{  
void draw(){System.out.println("drawing circle");}  
}  
//In real scenario, method is called by programmer or user  
class TestAbstraction1{  
public static void main(String args[]){  
Shape s=new Circle1();
s.draw();  
}  
}



Inheritance:


/base class or parent class or super class 

class A{ 

  //parent class methods 

  void method1(){} 

  void method2(){} 
} 

  
//derived class or child class or base class 

class B extends A{  //Inherits parent class methods 

  //child class methods 

  void method3(){} 

  void method4(){} 
}


Encapsulation:

package com.demo;  
class Test{  
public static void main(String[] args){  
//creating instance of the encapsulated class  
Student s=new Student();  
//setting value in the name member  
s.setName("vijay");  
//getting value of the name member  
System.out.println(s.getName());  
}  
}

polymorphism:

class Shapes {
  public void area() {
    System.out.println("The formula for area of ");
  }
}
class Triangle extends Shapes {
  public void area() {
    System.out.println("Triangle is Â½ * base * height ");
  }
}
class Circle extends Shapes {
  public void area() {
    System.out.println("Circle is 3.14 * radius * radius ");
  }
}
class Main {
  public static void main(String[] args) {
    Shapes myShape = new Shapes();  // Create a Shapes object
    Shapes myTriangle = new Triangle();  // Create a Triangle object
    Shapes myCircle = new Circle();  // Create a Circle object
    myShape.area();
    myTriangle.area();
    myShape.area();
    myCircle.area();
  }
}
